{"version":3,"sources":["Components/Game2048/logic.js","Components/Game2048/index.js","App.js","index.js"],"names":["storageName","game","size","this","storageData","localStorage","getItem","data","JSON","parse","id","bestScore","grid","Math","sqrt","length","score","createNewGame","Array","fill","addTile","gameWon","gameOver","moved","newFreeIndex","floor","random","freeCellsList","newValue","newIndex","index","value","position","merge","remove","i","j","gain","offset","deltaOffset","deltaIndex","type","getIndex","nextIndex","k","updateGrid","forEach","element","isGameOver","writeToStorage","setItem","stringify","map","filter","Button","content","callback","className","onClick","Tile","Game2048","useState","setData","continueGame","setContinueGame","useEffect","handleKeyboard","e","keyCode","makeStep","document","addEventListener","removeEventListener","newGame","onTransitionEnd","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.191d9a48.chunk.js","sourcesContent":["const storageName = 'game2048'\r\n\r\nclass Game2048 {\r\n    constructor(size) {\r\n        this.size = size\r\n        //if there is a storage, then create game from storage\r\n        const storageData = localStorage.getItem(storageName)\r\n        if (storageData) {\r\n            const data = JSON.parse(storageData)\r\n            this.id = data.id\r\n            this.bestScore = data.bestScore\r\n            if (data.grid) {\r\n                this.grid = data.grid\r\n                this.size = Math.sqrt(this.grid.length)\r\n                this.score = data.score\r\n            } else {\r\n                this.createNewGame()\r\n            }\r\n        } else {\r\n            this.id = 0\r\n            this.bestScore = 0\r\n            this.createNewGame()\r\n        }\r\n    }\r\n    createNewGame() {\r\n        this.grid = new Array(this.size * this.size).fill(null)\r\n        this.addTile()\r\n        this.addTile()\r\n        this.score = 0\r\n        this.gameWon = false\r\n        this.gameOver = false\r\n        this.moved = false\r\n    }\r\n    //get free cell in the grid\r\n    get freeCellsList() {\r\n        return this.grid.map((element, index) => {\r\n            return ({\r\n                index: index,\r\n                value: element\r\n            })\r\n        }).filter((element) => element.value === null)\r\n    }\r\n    addTile() {\r\n        const newFreeIndex = Math.floor(Math.random() * (this.freeCellsList.length - 1))//index of free cell\r\n        const newValue = Math.random() < 0.9 ? 2 : 4; //new value 2-90%, 4 -10%\r\n        const newIndex = this.freeCellsList[newFreeIndex].index //new index in grid\r\n        this.grid[newIndex] = {\r\n            value: newValue,\r\n            position: newIndex, //new position then tile merge\r\n            id: this.id++,\r\n            merge: false,\r\n            remove: false,\r\n        }\r\n    }\r\n    isGameOver() {\r\n        //if there is a free cell then game continue\r\n        if (this.freeCellsList.length !== 0)\r\n            return false\r\n        //if there are equal values then game continue\r\n        for (let i = 0; i < this.size * this.size; i += this.size) {\r\n            for (let j = 0; j < this.size - 1; j++) {\r\n                if (this.grid[i + j].value === this.grid[i + j + 1].value)\r\n                    return false\r\n            }\r\n        }\r\n        for (let i = 0; i < this.size; i++) {\r\n            for (let j = 0; j < this.size * this.size - this.size; j += this.size) {\r\n                if (this.grid[i + j].value === this.grid[i + j + this.size].value)\r\n                    return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    makeStep(type = 0) {\r\n        let gain, offset, deltaOffset, deltaIndex\r\n        switch (type) {\r\n            case 0: //up\r\n                gain = 4\r\n                offset = 0\r\n                deltaOffset = 1\r\n                break\r\n            case 1: //right\r\n                gain = -1\r\n                offset = this.size - 1\r\n                deltaOffset = this.size\r\n                break;\r\n            case 2: //down\r\n                gain = -4\r\n                offset = this.size * this.size - this.size\r\n                deltaOffset = 1\r\n                break;\r\n            case 3: //left\r\n                gain = 1\r\n                offset = 0\r\n                deltaOffset = this.size\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        deltaIndex = gain\r\n        //get index in grid from index in loop\r\n        const getIndex = index => index * gain + offset\r\n        //first loop in one direction\r\n        for (let i = 0; i < this.size; i++) {\r\n            let newIndex = getIndex(0) //index of position there insert new Tale\r\n            let nextIndex = getIndex(0)//index of next tale\r\n            //second loop in other direction\r\n            for (let j = 0; j < this.size; j++) {\r\n                let index = getIndex(j)\r\n                if (this.grid[index]) {\r\n                    if (newIndex !== index) {\r\n                        this.grid[index].position = newIndex\r\n                        this.moved = true\r\n                    }\r\n                    let k = j + 1\r\n                    //loop for searcn next element\r\n                    while (k < this.size) {\r\n                        nextIndex = getIndex(k)\r\n                        if (this.grid[nextIndex]) {\r\n                            //if value equal merge tale\r\n                            if (this.grid[nextIndex].value === this.grid[index].value) {\r\n                                this.grid[nextIndex].position = this.grid[index].position\r\n                                this.grid[index].merge = true\r\n                                this.grid[nextIndex].remove = true\r\n                                this.moved = true\r\n                                j=k\r\n                            }\r\n                            break\r\n                        }\r\n                        k++\r\n                    }\r\n                    newIndex += deltaIndex\r\n                }\r\n            }\r\n            offset += deltaOffset\r\n        }\r\n    }\r\n    //update grid, make mrge and new position\r\n    updateGrid() {\r\n        if (this.moved) {\r\n            let updateGrid = new Array(this.size * this.size).fill(null)\r\n            this.grid.forEach(element => {\r\n                if (element) {\r\n                    if (element.remove)\r\n                        return\r\n                    if (element.merge) {\r\n                        element.value *= 2\r\n                        element.merge = false\r\n                        this.score += element.value\r\n                        //if merge value 2048 then game over\r\n                        if (element.value === 2048)\r\n                            this.gameWon = true\r\n                    }\r\n                    updateGrid[element.position] = element\r\n                }\r\n\r\n            });\r\n            this.grid = [...updateGrid]\r\n            this.bestScore = this.score > this.bestScore ? this.score : this.bestScore\r\n            this.addTile()\r\n            this.gameOver = this.isGameOver();\r\n            this.writeToStorage()\r\n        }\r\n    }\r\n\r\n    writeToStorage() {\r\n        const data = {}\r\n        data.bestScore = this.bestScore\r\n        //if game over then write null\r\n        if ( this.gameOver) {\r\n            data.grid = null\r\n            data.score = null\r\n            data.id = null \r\n        } else {\r\n            data.grid = this.grid\r\n            data.score = this.score\r\n            data.id = this.id\r\n        }\r\n        localStorage.setItem(storageName, JSON.stringify(data))\r\n    }\r\n\r\n}\r\nconst game = new Game2048(4)\r\n\r\nexport default game;","import React, { useEffect, useState } from 'react';\r\nimport game from './logic';\r\nimport './styles.scss';\r\n\r\nfunction Game2048() {\r\n    const [data, setData] = useState(game.grid)\r\n    const [continueGame, setContinueGame] = useState(false)\r\n    useEffect(() => {\r\n        const handleKeyboard = (e) => {\r\n            switch (e.keyCode) {\r\n                case 38: //Up\r\n                    makeStep(0)\r\n                    break;\r\n                case 39: //Right\r\n                    makeStep(1)\r\n                    break;\r\n                case 40: //Down\r\n                    makeStep(2)\r\n                    break;\r\n                case 37: //Left\r\n                    makeStep(3)\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        document.addEventListener(\"keydown\", handleKeyboard)\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleKeyboard)\r\n        }\r\n    }, [])\r\n    const newGame = () => {\r\n        game.createNewGame()\r\n        setContinueGame(false)\r\n        setData([...game.grid])\r\n    }\r\n    const updateGrid = () => {\r\n        if (!game.moved)\r\n            return\r\n        game.updateGrid()\r\n        setData([...game.grid])\r\n        game.moved = false\r\n    }\r\n    const makeStep = (type) => {\r\n        if (game.moved)\r\n            return\r\n        game.makeStep(type)\r\n        setData([...game.grid])\r\n    }\r\n    const setContinue = () => {\r\n        setContinueGame(true)\r\n    }\r\n    return (\r\n        <div className=\"game2048\">\r\n            <div className=\"header\">\r\n                <div className=\"title\">\r\n                    Game 2048\r\n                </div>\r\n                <div className=\"score\">\r\n                    Score: <br></br>\r\n                    {game.score}\r\n                </div>\r\n                <div className=\"bestScore\">\r\n                    Best: <br></br>\r\n                    {game.bestScore}\r\n                </div>\r\n                <Button content='New game' callback={newGame} />\r\n            </div>\r\n            <div className=\"gridContainer\" onTransitionEnd={updateGrid}>\r\n                {\r\n                    data.map((element, i) => (\r\n                        <div className={`gridItem gridItem-${i}`} key={i}>\r\n                        </div>\r\n                    )\r\n                    )\r\n                }\r\n                {\r\n                    data.map((element) => (\r\n                        element ?\r\n                            <Tile data={element} key={element.id}/>\r\n                            :\r\n                            null\r\n                    )\r\n                    )\r\n                }\r\n                {\r\n                    game.gameWon && !continueGame ?\r\n                        <div className='gameStatus gameWon'>\r\n                            <p className='gameStatusTitle'>Game won!</p>\r\n                            <div>\r\n                                <Button content='New game' callback={newGame} />\r\n                                <Button content='Continue' callback={setContinue} />\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    game.gameOver ?\r\n                        <div className='gameStatus gameOver'>\r\n                            <p className='gameStatusTitle'>Game over</p>\r\n                            <div>\r\n                                <Button content='New game' callback={newGame} />\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nfunction Button({ content, callback }) {\r\n    return (\r\n        <button className='button' onClick={callback}>\r\n            {content}\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction Tile({ data }) {\r\n    return (\r\n        <div className={`gridItem gridItem-${data.position} gridItemValue-${data.value}`} >\r\n            {data.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game2048;","import Game2048 from './Components/Game2048/';\n\nfunction App() {\n  return (\n    <>\n        <Game2048/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}